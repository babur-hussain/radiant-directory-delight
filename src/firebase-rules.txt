
// Firestore Rules
// Copy and paste these rules in your Firebase Console > Firestore Database > Rules tab

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow public read access to business listings
    match /businesses/{businessId} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Allow public read access to subscription packages
    match /subscriptionPackages/{packageId} {
      allow read: if true;
      // Update this line to explicitly allow admin users to write to subscription packages
      allow write: if request.auth != null && isAdmin();
    }
    
    // User profiles can be read/written by the owner or admins
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (request.auth.uid == userId || isAdmin());
      
      // Allow creating new user documents
      allow create: if request.auth != null;
    }
    
    // ENHANCED RULES: Allow admins to read/write ALL users collection
    match /users/{allPaths=**} {
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // Subscriptions can be read by the owner or admins, but only created/updated by admins
    match /subscriptions/{subscriptionId} {
      allow read: if request.auth != null && 
                 (request.auth.uid == resource.data.userId || isAdmin());
      allow write: if request.auth != null && isAdmin();
    }
    
    // Allow admin-only collections to be accessed only by admins
    match /adminSettings/{document=**} {
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // Admins collection contains user IDs of admin users
    match /admins/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Categories and locations can be read by anyone, written only by admins
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin();
    }
    
    match /locations/{locationId} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Helper function to check if the current user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid)) ||
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}
